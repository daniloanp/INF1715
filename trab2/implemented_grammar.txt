program -> {NL} decl {decl};

decl -> declVar start 
decl -> declFunction start


declVar -> 'ID' ':' type 'NL'

type -> 'CHAR'
type -> 'STRING'
type -> 'INT'
type -> 'BOOL'
type -> '[' ']' type

declFunction -> 'FUN' 'ID' '(' params ')' [ ':' type ] 'NL'
					block
				'END' ->NL-< 


params -> param { ','' param }
param -> 'ID' ':' type

block -> ['ID' declOrCommand]
		 { command }


declOrCommand -> ':' type 'NL' [ 'ID' declOrCommand ]
				| commandAttrOrCall 'NL'


command -> commandWhile 'NL'
command -> commandIf 'NL'
command -> commandReturn 'NL'
command -> 'ID' commandAttrOrCall 'NL'

commandIf->'IF' expression 'NL'
				block	
			{ 
			'ELSE' 'IF' expression 'NL'
				block }
			[
			'ELSE' 'NL'
				block
			]
			'END'
			
commandReturn -> 'RETURN' [ expression] 
commandWhile -> 'WHILE' expression'NL'
					block
				'LOOP'
arrayAccess -> 	{ '['  expression']' }
attr -> arrayAccess '=' expression
call -> '(' [expressionList] ')'
commandAttrOrCall -> attr | call

expressionList -> expression { ',' expression }

expression -> C 'OR'  expression
expression -> C

new -> 'new' '[' expression ']' type
varOrCall -> 'ID' call 
varOrCall -> 'ID' arrayAccess

A -> C
A -> C 'AND' A

C -> E 
C -> E '>' C
C -> E '>=' C
C -> E '<' C
C -> E '<=' C
C -> E '=' C
C -> E '<>' C

E -> T
E -> T '+' E
E -> T '-' E
-- First(E) == First(U) u First(F)

T -> U
T -> U '*' E
T -> U '/' E
First(U) u First(F)

U-> '-' U
U-> 'not' U
U-> F 


F -> '(' expression ')' 
F -> 'BOOL_VAL'
F -> 'INT_VAL'
F -> 'STRING_VAL'
F -> varOrCall
F-> new






